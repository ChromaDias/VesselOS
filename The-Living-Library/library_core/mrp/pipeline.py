"""
Lightweight adapters around vessel-narrative-MRP encode/decode APIs.

Until the full integration is wired, the helpers below provide stubs
that can be swapped out with the actual MRP calls from the submodule.
"""

from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Dict


@dataclass(slots=True)
class LessonPayload:
    """Represents the structured data captured for a lesson."""

    title: str
    body: str
    metadata: Dict[str, Any]


def encode_lesson(text: str, *, title: str = "Untitled") -> LessonPayload:
    """
    Placeholder encoder that will call into vessel-narrative-MRP.

    Args:
        text: Source dictation or narrative snippet.
        title: Optional label for the lesson artifact.
    """
    payload = LessonPayload(title=title, body=text, metadata={"encoded": False})
    return payload


def decode_lesson(payload: LessonPayload) -> str:
    """
    Placeholder decoder for round-tripping lesson payloads.

    Args:
        payload: Structured lesson generated by `encode_lesson`.
    """
    return payload.body
