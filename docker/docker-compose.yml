version: "3.9"
name: vesselos

services:
  # === Core Message Bus (Optional) ===
  message-broker:
    build:
      context: ./message-broker
    image: vesselos/message-broker:${VERSION:-latest}
    container_name: message_broker
    ports:
      - "5550:5550"  # XPUB/XSUB proxy
    networks:
      - vesselos-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5550"]
      interval: 10s
      timeout: 3s
      retries: 5

  # === SIGPRINT Encoder Agent ===
  sigprint:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: sigprint-agent
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VERSION: ${VERSION:-latest}
    image: vesselos/sigprint:${VERSION:-latest}
    container_name: sigprint_agent
    restart: unless-stopped
    ports:
      - "5555:5555"  # ZMQ REP socket
      - "8080:8080"  # HTTP health endpoint
    environment:
      - ZMQ_PORT=5555
      - HTTP_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - sigprint-data:/app/data/sigprint
      - logs:/app/logs
    networks:
      - vesselos-net
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 15s
      timeout: 3s
      start_period: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # === Journal Logger Agent ===
  journal:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: journal-logger
    image: vesselos/journal:${VERSION:-latest}
    container_name: journal_logger
    restart: unless-stopped
    ports:
      - "5556:5556"  # ZMQ REP socket
      - "5557:5557"  # ZMQ PUB socket for narrative events
      - "8082:8082"  # HTTP health/metrics
    environment:
      - ZMQ_PORT=5556
      - JOURNAL_PUB_PORT=5557
      - JOURNAL_HTTP_PORT=8082
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JOURNAL_DIR=/app/data/journals
      - RETENTION_DAYS=${JOURNAL_RETENTION:-30}
      - PYTHONUNBUFFERED=1
    volumes:
      - journal-data:/app/data/journals
      - logs:/app/logs
    networks:
      - vesselos-net
    depends_on:
      message-broker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/health"]
      interval: 20s
      timeout: 5s
      start_period: 10s
      retries: 3

  # === Limnus Narrative Agent ===
  limnus:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: limnus-agent
    image: vesselos/limnus:${VERSION:-latest}
    container_name: limnus_agent
    restart: unless-stopped
    environment:
      - NARRATOR=Limnus
      - CHANNEL=R
      - FREQUENCY=0.58
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - narrative-data:/app/data/narrative
      - logs:/app/logs
    networks:
      - vesselos-net
    depends_on:
      journal:
        condition: service_healthy

  # === Garden Narrative Agent ===
  garden:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: garden-agent
    image: vesselos/garden:${VERSION:-latest}
    container_name: garden_agent
    restart: unless-stopped
    environment:
      - NARRATOR=Garden
      - CHANNEL=G
      - FREQUENCY=0.39
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - narrative-data:/app/data/narrative
      - logs:/app/logs
    networks:
      - vesselos-net
    depends_on:
      journal:
        condition: service_healthy

  # === Web Interface ===
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: web-interface
    image: vesselos/web:${VERSION:-latest}
    container_name: web_interface
    restart: unless-stopped
    ports:
      - "8088:8080"  # Different port to avoid conflicts
    volumes:
      - ../narrative/vessel-mrp/frontend:/app/frontend:ro
      - ../tools/echo-toolkit/web:/app/web:ro
    networks:
      - vesselos-net
    depends_on:
      - sigprint
      - journal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 3s
      retries: 3

  # === PostgreSQL Database ===
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vesselos}
      - POSTGRES_USER=${POSTGRES_USER:-vesselos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vesselos-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vesselos}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Redis Cache & Pub/Sub ===
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - vesselos-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # === Monitoring - Prometheus ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - vesselos-net
    depends_on:
      - sigprint
      - journal

  # === Monitoring - Grafana ===
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,yesoreyeram-infinity-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/json:/var/lib/grafana/dashboards:ro
    networks:
      - vesselos-net
    depends_on:
      - prometheus
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3

  # === All-in-One Orchestrator (Alternative) ===
  # orchestrator:
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile
  #     target: orchestrator
  #   image: vesselos/orchestrator:${VERSION:-latest}
  #   container_name: vesselos_orchestrator
  #   restart: unless-stopped
  #   ports:
  #     - "5555:5555"
  #     - "5556:5556"
  #     - "5557:5557"
  #     - "8080:8080"
  #   volumes:
  #     - all-data:/app/data
  #     - logs:/app/logs
  #   networks:
  #     - vesselos-net
  #   depends_on:
  #     - postgres
  #     - redis

networks:
  vesselos-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  sigprint-data:
    driver: local
  journal-data:
    driver: local
  narrative-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  logs:
    driver: local

# Usage notes are included in the repo documentation.
